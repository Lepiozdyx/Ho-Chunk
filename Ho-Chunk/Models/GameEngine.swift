import Foundation
import Combine

class GameEngine: ObservableObject {
    // –ö–ª–∞—Å—Å-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è GameState
    class GameStateWrapper: ObservableObject {
        private var shouldNotifyObservers = true
        
        @Published var state: GameState
        
        init(state: GameState = GameState()) {
            self.state = state
        }
        
        // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        func setStateSilently(_ newState: GameState) {
            shouldNotifyObservers = false
            state = newState
            shouldNotifyObservers = true
        }
    }
    
    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–ª–∞—Å—Å-–æ–±–µ—Ä—Ç–∫—É
    @Published var gameStateWrapper: GameStateWrapper
    
    // –¢–∞–π–º–µ—Ä –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    private var gameTimer: AnyCancellable?
    private let updateInterval: TimeInterval = 0.1 // 100ms –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    // AI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
    private var aiController: AIViewModel?
    private var lastAIUpdateTime: Date = Date()
    private var aiUpdateInterval: TimeInterval = 5.0
    
    // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –∏–≥—Ä–∞
    private var isGameRunning: Bool = false
    
    // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    private var updateCounter = 0
    
    // –í—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ state
    var gameState: GameState {
        get { return gameStateWrapper.state }
        set {
            updateCounter += 1
            print("üîÑ GameEngine: Setting new game state (#\(updateCounter))")
            gameStateWrapper.setStateSilently(newValue) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            // –Ø–≤–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            objectWillChange.send()
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
    init(initialState: GameState = GameState()) {
        print("üèÅ GameEngine: Initializing with default state")
        self.gameStateWrapper = GameStateWrapper(state: initialState)
    }
    
    // MARK: - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã–º —Ü–∏–∫–ª–æ–º
    
    func startGame(level: Int) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –∏–≥—Ä–∞
        if isGameRunning {
            print("‚ö†Ô∏è GameEngine: Game already running, stopping first")
            stopGameLoop()
            isGameRunning = false
        }
        
        print("üéÆ GameEngine: Starting game at level \(level)")
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω—è
        let levelConfiguration = createLevelConfiguration(for: level)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        let newGameState = levelConfiguration.createGameState()
        gameState = newGameState
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è AI
        aiUpdateInterval = levelConfiguration.aiUpdateIntervalSeconds
        
        // –°–æ–∑–¥–∞–Ω–∏–µ AI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        aiController = AIViewModel(gameState: gameState, aiUpdateInterval: aiUpdateInterval)
        
        // –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è
        var updatedState = gameState
        updatedState.calculatePlayerControlPercentage()
        gameState = updatedState
        
        // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        startGameLoop()
        
        isGameRunning = true
        
        // –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print("‚úÖ GameEngine: Game started: \(gameState.regions.count) regions, AI interval: \(aiUpdateInterval)s")
    }
    
    func pauseGame() {
        print("‚è∏Ô∏è GameEngine: Pausing game")
        stopGameLoop()
        
        var newState = gameState
        newState.isPaused = true
        gameState = newState
        
        isGameRunning = false
    }
    
    func resumeGame() {
        print("‚ñ∂Ô∏è GameEngine: Resuming game")
        
        var newState = gameState
        newState.isPaused = false
        gameState = newState
        
        startGameLoop()
        isGameRunning = true
    }
    
    func stopGame() {
        print("üõë GameEngine: Stopping game")
        stopGameLoop()
        gameState = GameState()
        isGameRunning = false
    }
    
    private func startGameLoop() {
        stopGameLoop() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
        
        print("‚è±Ô∏è GameEngine: Starting game loop...")
        gameTimer = Timer.publish(every: updateInterval, on: .main, in: .common)
            .autoconnect()
            .sink { [weak self] _ in
                self?.updateGame()
            }
    }
    
    private func stopGameLoop() {
        if gameTimer != nil {
            print("‚è±Ô∏è GameEngine: Stopping game loop")
            gameTimer?.cancel()
            gameTimer = nil
        }
    }
    
    // MARK: - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    private var loopCounter: Int = 0
    
    private func updateGame() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞ –ø–∞—É–∑–µ –ª–∏ –∏–≥—Ä–∞
        if gameState.isPaused {
            return
        }
        
        loopCounter += 1
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥–æ–µ 50-–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å
        let shouldLog = loopCounter % 50 == 0
        
        if shouldLog {
            print("üîÑ GameEngine: Loop update #\(loopCounter)")
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        var updatedState = gameState
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        let currentTime = Date()
        let elapsedTime = currentTime.timeIntervalSince(updatedState.lastUpdateTime)
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏
        if elapsedTime < 0.01 {
            return
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–π—Å–∫
        updateTroopGeneration(elapsedTime: elapsedTime, state: &updatedState, shouldLog: shouldLog)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–æ–π—Å–∫
        updateArmyTransfers(state: &updatedState, shouldLog: shouldLog)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
        updatedState.calculatePlayerControlPercentage()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å AI
        updateAI(currentTime: currentTime, state: &updatedState, shouldLog: shouldLog)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è
        checkGameEndConditions(state: &updatedState)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updatedState.lastUpdateTime = currentTime
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if didStateChange(updatedState, fromState: gameState) {
            gameState = updatedState
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ
    private func didStateChange(_ newState: GameState, fromState oldState: GameState) -> Bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–π—Å–∫
        let oldTroops = Dictionary(uniqueKeysWithValues: oldState.regions.map { ($0.key, $0.value.troopCount) })
        
        for (regionId, region) in newState.regions {
            if let oldCount = oldTroops[regionId], oldCount != region.troopCount {
                return true
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤
        let oldOwners = Dictionary(uniqueKeysWithValues: oldState.regions.map { ($0.key, $0.value.owner) })
        
        for (regionId, region) in newState.regions {
            if let oldOwner = oldOwners[regionId], oldOwner != region.owner {
                return true
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π
        if oldState.activeTransfers.count != newState.activeTransfers.count {
            return true
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π
        for (transferId, transfer) in newState.activeTransfers {
            if let oldTransfer = oldState.activeTransfers[transferId],
               abs(oldTransfer.progress - transfer.progress) > 0.05 {
                return true
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è
        if abs(oldState.playerControlPercentage - newState.playerControlPercentage) > 0.01 {
            return true
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è
        if oldState.isPlayerVictory != newState.isPlayerVictory ||
           oldState.isPlayerDefeat != newState.isPlayerDefeat {
            return true
        }
        
        return false
    }
    
    private func updateTroopGeneration(elapsedTime: TimeInterval, state: inout GameState, shouldLog: Bool) {
        // –ö–æ–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Ä–µ–≥–∏–æ–Ω–æ–≤
        var updatedRegions = state.regions
        var updatedAnyRegion = false
        
        for (regionId, region) in state.regions {
            if region.owner != .neutral {
                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–π—Å–∫: 1 –≤–æ–π—Å–∫–æ –≤ —Å–µ–∫—É–Ω–¥—É
                let additionalTroops = Int(elapsedTime)
                if additionalTroops > 0 {
                    var updatedRegion = region
                    updatedRegion.troopCount += additionalTroops
                    updatedRegions[regionId] = updatedRegion
                    updatedAnyRegion = true
                    
                    if shouldLog {
                        print("üë• GameEngine: Region \(regionId) generated \(additionalTroops) troops, now has \(updatedRegion.troopCount)")
                    }
                }
            }
        }
        
        if updatedAnyRegion {
            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            state.regions = updatedRegions
        }
    }
    
    private func updateArmyTransfers(state: inout GameState, shouldLog: Bool) {
        if state.activeTransfers.isEmpty {
            return
        }
        
        var updatedTransfers = state.activeTransfers
        var transfersToRemove: [UUID] = []
        
        for (transferId, transfer) in state.activeTransfers {
            var updatedTransfer = transfer
            updatedTransfer.updateProgress()
            
            if shouldLog {
                print("üö∂ GameEngine: Transfer \(transferId) progress: \(updatedTransfer.progress)")
            }
            
            if updatedTransfer.isCompleted {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                print("‚úÖ GameEngine: Transfer \(transferId) completed")
                processCompletedTransfer(updatedTransfer, state: &state)
                transfersToRemove.append(transferId)
            } else {
                updatedTransfers[transferId] = updatedTransfer
            }
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π
        for transferId in transfersToRemove {
            updatedTransfers.removeValue(forKey: transferId)
        }
        
        state.activeTransfers = updatedTransfers
    }
    
    private func updateAI(currentTime: Date, state: inout GameState, shouldLog: Bool) {
        guard let aiController = aiController else { return }
        
        let timeElapsed = currentTime.timeIntervalSince(lastAIUpdateTime)
        if timeElapsed >= aiUpdateInterval {
            if shouldLog {
                print("ü§ñ GameEngine: AI making move")
            }
            
            aiController.makeMove { [weak self] updatedState in
                guard let self = self else { return }
                
                // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                var newState = self.gameState
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                for (transferId, transfer) in updatedState.activeTransfers {
                    if newState.activeTransfers[transferId] == nil {
                        newState.activeTransfers[transferId] = transfer
                        print("ü§ñ GameEngine: AI created new transfer \(transferId)")
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–π—Å–∫ –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö, –æ—Ç–∫—É–¥–∞ AI –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–æ–π—Å–∫–∞
                for (regionId, region) in updatedState.regions {
                    if let existingRegion = newState.regions[regionId],
                       existingRegion.owner == .cpu && region.troopCount < existingRegion.troopCount {
                        newState.regions[regionId] = region
                    }
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                self.gameState = newState
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ AI
                self.lastAIUpdateTime = currentTime
            }
        }
    }
    
    // MARK: - –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
    
    private func processCompletedTransfer(_ transfer: ArmyTransfer, state: inout GameState) {
        guard var toRegion = state.regions[transfer.toRegionId] else { return }
        
        print("‚öîÔ∏è GameEngine: Processing transfer to region \(transfer.toRegionId) with \(transfer.count) troops")
        
        // –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–º—É –∂–µ –∏–≥—Ä–æ–∫—É, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–π—Å–∫–∞
        if let fromRegion = state.regions[transfer.fromRegionId], fromRegion.owner == toRegion.owner {
            toRegion.troopCount += transfer.count
            state.regions[transfer.toRegionId] = toRegion
            print("‚ûï GameEngine: Added \(transfer.count) troops to owned region, now has \(toRegion.troopCount)")
            return
        }
        
        // –ò–Ω–∞—á–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–æ–π
        let attackingTroops = transfer.count
        let defendingTroops = toRegion.troopCount
        let previousOwner = toRegion.owner
        
        if attackingTroops > defendingTroops {
            // –ê—Ç–∞–∫—É—é—â–∏–π –ø–æ–±–µ–¥–∏–ª
            let remainingTroops = attackingTroops - defendingTroops
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞—Ç–∞–∫—É—é—â–∏—Ö –≤–æ–π—Å–∫
            if let fromRegion = state.regions[transfer.fromRegionId] {
                toRegion.owner = fromRegion.owner
            }
            toRegion.troopCount = remainingTroops
            print("üèÜ GameEngine: Battle won! Region \(transfer.toRegionId) captured from \(previousOwner) to \(toRegion.owner) with \(remainingTroops) troops remaining")
        } else {
            // –ó–∞—â–∏—Ç–Ω–∏–∫ –ø–æ–±–µ–¥–∏–ª –∏–ª–∏ –Ω–∏—á—å—è
            let remainingTroops = defendingTroops - attackingTroops
            toRegion.troopCount = remainingTroops
            print("üíî GameEngine: Battle lost! Region \(transfer.toRegionId) defended by \(toRegion.owner) with \(remainingTroops) troops remaining")
        }
        
        state.regions[transfer.toRegionId] = toRegion
    }
    
    private func checkGameEndConditions(state: inout GameState) {
        // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è
        let wasVictory = state.isPlayerVictory
        let wasDefeat = state.isPlayerDefeat
        
        state.isPlayerVictory = state.regions.values.allSatisfy { $0.owner == .player }
        state.isPlayerDefeat = !state.regions.values.contains { $0.owner == .player }
        
        if !wasVictory && state.isPlayerVictory {
            print("üèÜ GameEngine: PLAYER VICTORY DETECTED!")
        }
        
        if !wasDefeat && state.isPlayerDefeat {
            print("üíÄ GameEngine: PLAYER DEFEAT DETECTED!")
        }
    }
    
    // MARK: - –ö–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞
    
    func sendTroops(from fromRegionId: UUID, to toRegionId: UUID, count: Int) -> Bool {
        print("‚öîÔ∏è GameEngine: Attempting to send \(count) troops from \(fromRegionId) to \(toRegionId)")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        guard let fromRegion = gameState.regions[fromRegionId],
              gameState.regions[toRegionId] != nil,
              fromRegion.owner == .player,
              fromRegion.troopCount >= count,
              count > 0
        else {
            print("‚ùå GameEngine: Send troops failed: conditions not met")
            if let fromRegion = gameState.regions[fromRegionId] {
                print("‚ÑπÔ∏è GameEngine: From region details - owner: \(fromRegion.owner), troops: \(fromRegion.troopCount)")
            } else {
                print("‚ÑπÔ∏è GameEngine: From region not found")
            }
            
            if let toRegion = gameState.regions[toRegionId] {
                print("‚ÑπÔ∏è GameEngine: To region details - owner: \(toRegion.owner), troops: \(toRegion.troopCount)")
            } else {
                print("‚ÑπÔ∏è GameEngine: To region not found")
            }
            return false
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        var updatedState = gameState
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–æ–π—Å–∫
        let transfer = ArmyTransfer(fromRegionId: fromRegionId, toRegionId: toRegionId, count: count)
        
        // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–π—Å–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ
        var updatedFromRegion = fromRegion
        updatedFromRegion.troopCount -= count
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        updatedState.regions[fromRegionId] = updatedFromRegion
        updatedState.activeTransfers[transfer.id] = transfer
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        gameState = updatedState
        
        print("‚úÖ GameEngine: Successfully sent \(count) troops from \(fromRegionId) to \(toRegionId), remaining in source: \(updatedFromRegion.troopCount)")
        return true
    }
    
    // MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    private func createLevelConfiguration(for level: Int) -> LevelConfiguration {
        switch level {
        case 1:
            return LevelConfiguration.createLevel1()
        default:
            return LevelConfiguration.createLevel1()
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–≤—å—é –∏ –æ—Ç–ª–∞–¥–∫–∏
    func loadState(_ state: GameState) {
        print("üß™ GameEngine: Loading test state")
        self.gameState = state
        self.lastAIUpdateTime = Date()
    }
}

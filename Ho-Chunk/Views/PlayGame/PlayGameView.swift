import SwiftUI

struct PlayGameView: View {
    @ObservedObject var gameViewModel: GameViewModel
    @StateObject private var mapViewModel: MapViewModel
    
    // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ @State)
    @State private var isViewInitialized = false
    
    init(gameViewModel: GameViewModel) {
        self._gameViewModel = ObservedObject(wrappedValue: gameViewModel)
        self._mapViewModel = StateObject(wrappedValue: MapViewModel(gameEngine: gameViewModel.gameEngine))
    }
    
    var body: some View {
        ZStack {
            BgView(name: .desertBg, isBlur: true)
            
            VStack {
                // –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                GameTopBarView(playerControlPercentage: gameViewModel.gameEngine.gameState.playerControlPercentage)
                    .id(gameViewModel.gameEngine.gameState.playerControlPercentage) // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
                
                Spacer()
                
                // –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥ –∫–∞—Ä—Ç—ã - –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                MapView(mapViewModel: mapViewModel)
                    .layoutPriority(1)
                
                Spacer()
            }
            
            // –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã
            VStack {
                HStack {
                    Spacer()
                    
                    Button {
                        gameViewModel.navigateToPause()
                    } label: {
                        Image(systemName: "pause.circle.fill")
                            .resizable()
                            .frame(width: 40, height: 40)
                            .foregroundColor(.white)
                            .background(Color.black.opacity(0.5))
                            .clipShape(Circle())
                    }
                    .padding()
                }
                Spacer()
            }
            
            // –û–≤–µ—Ä–ª–µ–∏ –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            if gameViewModel.gameEngine.gameState.isPlayerVictory {
                VictoryOverlayView(gameViewModel: gameViewModel)
            }
            
            if gameViewModel.gameEngine.gameState.isPlayerDefeat {
                DefeatOverlayView(gameViewModel: gameViewModel)
            }
        }
        .onAppear {
            print("üì± PlayGameView: appeared - checking initialization")
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ View
            if !isViewInitialized {
                print("üì± PlayGameView: First initialization")
                initializeGame()
                isViewInitialized = true
            } else {
                print("üì± PlayGameView: Already initialized, reappeared")
            }
        }
        .onDisappear {
            print("üì± PlayGameView: disappeared")
            // –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–∏ - —ç—Ç–æ –ø–æ—Ä–æ–∂–¥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–≤–æ–π–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        }
    }
    
    private func initializeGame() {
        print("üéÆ PlayGameView: Initializing game level \(gameViewModel.playerProgress.currentLevel)")
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ GameViewModel
        gameViewModel.startGame(level: gameViewModel.playerProgress.currentLevel)
    }
}

#Preview {
    let gameViewModel = GameViewModel()
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–≤—å—é
    var previewState = GameState()
    previewState.regions = [
        UUID(): RegionModel(
            position: CGPoint(x: 100, y: 300),
            size: 120,
            shape: .vector1,
            owner: .player,
            troopCount: 5
        ),
        UUID(): RegionModel(
            position: CGPoint(x: 600, y: 300),
            size: 120,
            shape: .vector10,
            owner: .cpu,
            troopCount: 5
        ),
        UUID(): RegionModel(
            position: CGPoint(x: 300, y: 200),
            size: 110,
            shape: .vector3,
            owner: .neutral,
            troopCount: 0
        )
    ]
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –¥–≤–∏–∂–æ–∫
    DispatchQueue.main.async {
        gameViewModel.gameEngine.loadState(previewState)
    }
    
    return PlayGameView(gameViewModel: gameViewModel)
}

import SwiftUI
import Combine

class MapViewModel: ObservableObject {
    // –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è UI
    @Published var regions: [RegionModel] = []
    @Published var activeTransfers: [ArmyTransfer] = []
    @Published var selectedRegionId: UUID?
    @Published var dragOrigin: CGPoint?
    @Published var dragDestination: CGPoint?
    
    // –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
    private let gameEngine: GameEngine
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    private var cancellables = Set<AnyCancellable>()
    
    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    private var isUpdatingFromEngine = false
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
    init(gameEngine: GameEngine) {
        print("üó∫Ô∏è MapViewModel: Initializing")
        self.gameEngine = gameEngine
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ GameEngine
        setupSubscriptions()
    }
    
    // MARK: - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    
    private func setupSubscriptions() {
        print("üó∫Ô∏è MapViewModel: Setting up subscriptions")
        
        // –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±–µ—Ä—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        gameEngine.$gameStateWrapper
            .receive(on: RunLoop.main)
            .sink { [weak self] wrapper in
                guard let self = self, !self.isUpdatingFromEngine else { return }
                
                self.isUpdatingFromEngine = true
                self.updateFromGameState(wrapper.state)
                self.isUpdatingFromEngine = false
            }
            .store(in: &cancellables)
    }
    
    // –ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    private func updateFromGameState(_ state: GameState) {
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–æ–π—Å–∫–∞ —Å –Ω–æ–≤—ã–º–∏
        let currentRegions = Dictionary(uniqueKeysWithValues:
            self.regions.map { ($0.id, $0) })
        
        let newRegions = Array(state.regions.values)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —á—Ç–æ-—Ç–æ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ
        var regionsChanged = false
        var transfersChanged = false
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö
        if newRegions.count != self.regions.count {
            regionsChanged = true
        } else {
            for region in newRegions {
                if let currentRegion = currentRegions[region.id] {
                    if currentRegion.troopCount != region.troopCount ||
                       currentRegion.owner != region.owner {
                        regionsChanged = true
                        break
                    }
                } else {
                    regionsChanged = true
                    break
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è—Ö –≤–æ–π—Å–∫
        let newTransfers = Array(state.activeTransfers.values)
        if newTransfers.count != self.activeTransfers.count {
            transfersChanged = true
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if regionsChanged {
            print("üîÑ MapViewModel: Updating regions from game state")
            self.regions = newRegions
        }
        
        if transfersChanged {
            print("üîÑ MapViewModel: Updating transfers from game state")
            self.activeTransfers = newTransfers
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if regionsChanged || transfersChanged {
            self.objectWillChange.send()
        }
    }
    
    // MARK: - –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
    
    // –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ (–ø–æ —Ç–∞–ø—É)
    func selectRegion(regionId: UUID) {
        print("üëÜ MapViewModel: Region selected: \(regionId)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Ä–µ–≥–∏–æ–Ω –∏–≥—Ä–æ–∫—É
        guard let region = regions.first(where: { $0.id == regionId }),
              region.owner == .player else {
            print("‚ùå MapViewModel: Region \(regionId) not owned by player, deselecting")
            selectedRegionId = nil
            return
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
        selectedRegionId = regionId
        print("‚úÖ MapViewModel: Player region selected: \(regionId), troops: \(region.troopCount)")
    }
    
    // –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–π—Å–∫)
    func startDrag(from position: CGPoint, regionId: UUID) {
        print("‚úã MapViewModel: Drag started from region \(regionId) at position: \(position)")
        
        guard let region = regions.first(where: { $0.id == regionId }),
              region.owner == .player,
              region.troopCount > 0 else {
            print("‚ùå MapViewModel: Cannot drag from region \(regionId) - not owned by player or no troops")
            return
        }
        
        selectedRegionId = regionId
        dragOrigin = position
        dragDestination = position // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—á–∞–ª–æ–º
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
    func updateDragDestination(to position: CGPoint) {
        dragDestination = position
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–π—Å–∫
    func endDrag(at position: CGPoint, screenSize: CGSize) -> Bool {
        print("üëã MapViewModel: Drag ended at position: \(position)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        guard let selectedId = selectedRegionId,
              let fromRegion = regions.first(where: { $0.id == selectedId }),
              fromRegion.owner == .player,
              fromRegion.troopCount > 0,
              let origin = dragOrigin,
              let destination = dragDestination else {
            print("‚ùå MapViewModel: Drag end failed: basic conditions not met")
            resetDragState()
            return false
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º
        let dx = destination.x - origin.x
        let dy = destination.y - origin.y
        let distanceSquared = dx * dx + dy * dy
        let minDistance: CGFloat = 100 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        
        if distanceSquared < minDistance {
            print("‚ùå MapViewModel: Drag too short, distance¬≤: \(distanceSquared) < min(\(minDistance))")
            resetDragState()
            return false
        }
        
        // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–≥–∏–æ–Ω-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è
        if let toRegion = findRegionAt(position: position, screenSize: screenSize) {
            if toRegion.id == selectedId {
                print("‚ùå MapViewModel: Cannot send troops to the same region")
                resetDragState()
                return false
            }
            
            print("üéØ MapViewModel: Target region found: \(toRegion.id), owner: \(toRegion.owner)")
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–π—Å–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ–ª–æ–≤–∏–Ω–∞ –∏–º–µ—é—â–∏—Ö—Å—è)
            let troopsToSend = max(1, fromRegion.troopCount / 2)
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º GameEngine –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–π—Å–∫
            let success = gameEngine.sendTroops(from: fromRegion.id, to: toRegion.id, count: troopsToSend)
            
            print(success ? "‚úÖ MapViewModel: Troops sent successfully" : "‚ùå MapViewModel: Failed to send troops")
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            resetDragState()
            return success
        } else {
            print("‚ùå MapViewModel: No target region found at position: \(position)")
            resetDragState()
            return false
        }
    }
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    func resetDragState() {
        print("üîÑ MapViewModel: Resetting drag state")
        selectedRegionId = nil
        dragOrigin = nil
        dragDestination = nil
    }
    
    // MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    // –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    func findRegionAt(position: CGPoint, screenSize: CGSize) -> RegionModel? {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–≥–∏–æ–Ω
        for region in regions {
            let scaledPosition = CoordinateSpaceHelper.scalePosition(region.position, for: screenSize)
            let scaledSize = CoordinateSpaceHelper.scaleSize(region.size, for: screenSize)
            
            // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ç–æ—á–∫–∏ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
            let dx = position.x - scaledPosition.x
            let dy = position.y - scaledPosition.y
            let distanceSquared = dx * dx + dy * dy
            
            // –†–∞–¥–∏—É—Å —Ä–µ–≥–∏–æ–Ω–∞ (–ø–æ–ª–æ–≤–∏–Ω–∞ —Ä–∞–∑–º–µ—Ä–∞)
            let radiusSquared = (scaledSize / 2) * (scaledSize / 2)
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–¥–∏—É—Å –∑–∞—Ö–≤–∞—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
            let extendedRadiusSquared = radiusSquared * 1.5
            
            // –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ä–µ–≥–∏–æ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if distanceSquared <= extendedRadiusSquared {
                print("üîç MapViewModel: Found region \(region.id) at position \(position), distance¬≤: \(distanceSquared), radius¬≤: \(extendedRadiusSquared)")
                return region
            }
        }
        
        // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ä–µ–≥–∏–æ–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        print("üîç MapViewModel: No direct region hit, looking for closest")
        let maxSelectionDistance: CGFloat = 80.0 // –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
        var closestRegion: RegionModel? = nil
        var closestDistanceSquared: CGFloat = maxSelectionDistance * maxSelectionDistance
        
        for region in regions {
            let scaledPosition = CoordinateSpaceHelper.scalePosition(region.position, for: screenSize)
            let dx = position.x - scaledPosition.x
            let dy = position.y - scaledPosition.y
            let distanceSquared = dx * dx + dy * dy
            
            if distanceSquared < closestDistanceSquared {
                closestRegion = region
                closestDistanceSquared = distanceSquared
                print("üîç MapViewModel: New closest region: \(region.id), distance¬≤: \(distanceSquared)")
            }
        }
        
        if let region = closestRegion {
            print("üîç MapViewModel: Found closest region \(region.id), distance¬≤: \(closestDistanceSquared)")
            return region
        }
        
        print("‚ùå MapViewModel: No region found near position \(position)")
        return nil
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –µ–≥–æ ID
    func getRegionPosition(regionId: UUID) -> CGPoint? {
        return regions.first(where: { $0.id == regionId })?.position
    }
}

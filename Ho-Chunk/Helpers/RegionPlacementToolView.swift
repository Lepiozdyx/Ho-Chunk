import SwiftUI

/// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
struct RegionPlacementToolView: View {
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–º–µ—â–∞–µ–º—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö
    @State private var regionData: [RegionPlacementData] = []
    
    // –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    @State private var selectedRegionIndex: Int? = nil
    
    // –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    @State private var selectedShapeIndex = 0
    @State private var selectedOwnerIndex = 0
    @State private var initialTroops: Int = 0
    @State private var regionWidth: CGFloat = 180
    @State private var regionHeight: CGFloat = 180
    
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤ (–¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è)
    @State private var nextId: Int = 1
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    let availableShapes: [ImageResource] = [.vector1, .vector2, .vector3, .vector4, .vector5, .vector6, .vector7, .vector8, .vector9, .vector10]
    
    let availableOwners: [Player] = [.player, .cpu, .neutral]
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π –∫–æ–¥
    @State private var generatedCode: String = ""
    @State private var showingCode: Bool = false
    
    // –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
    let screenWidth = UIScreen.main.bounds.height
    let screenHeight = UIScreen.main.bounds.width
    
    // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    @State private var isResizeMode: Bool = false
    
    var body: some View {
        ZStack {
            BgView(name: .desertBg, isBlur: true)
            
            // –°–µ—Ç–∫–∞ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ (–∫–∞–∂–¥—ã–µ 50 —Ç–æ—á–µ–∫)
            gridOverlay
            
            // –†–µ–≥–∏–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å
            ForEach(regionData.indices, id: \.self) { index in
                let isSelected = selectedRegionIndex == index
                
                Image(regionData[index].shape)
                    .resizable()
                    .scaledToFit()
                    .frame(width: regionData[index].width, height: regionData[index].height)
                    .colorMultiply(regionData[index].owner.color)
                    .opacity(isSelected ? 0.8 : 0.6)
                    .position(regionData[index].position)
                    .overlay(
                        // –¢–µ–∫—Å—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                        VStack(spacing: 2) {
                            Text("\(regionData[index].owner.rawValue)")
                                .font(.system(size: 14, weight: .bold))
                            Text("\(Int(regionData[index].position.x)),\(Int(regionData[index].position.y))")
                                .font(.system(size: 12))
                            Text("\(Int(regionData[index].width))√ó\(Int(regionData[index].height))")
                                .font(.system(size: 10))
                            if regionData[index].owner != .neutral {
                                Text("üí™ \(regionData[index].initialTroops)")
                                    .font(.system(size: 14, weight: .bold))
                            }
                        }
                        .foregroundColor(.white)
                        .shadow(color: .black, radius: 1)
                        .position(regionData[index].position)
                    )
                    .overlay(
                        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±–æ—Ä–∞
                        Circle()
                            .stroke(Color.yellow, lineWidth: 3)
                            .frame(width: max(regionData[index].width, regionData[index].height) + 10,
                                   height: max(regionData[index].width, regionData[index].height) + 10)
                            .position(regionData[index].position)
                            .opacity(isSelected ? 1 : 0)
                    )
                    // –†—É—á–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                    .overlay(
                        Group {
                            if isSelected && isResizeMode {
                                // –†—É—á–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ (–Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª)
                                Circle()
                                    .fill(Color.yellow)
                                    .frame(width: 20, height: 20)
                                    .position(
                                        x: regionData[index].position.x + regionData[index].width/2,
                                        y: regionData[index].position.y + regionData[index].height/2
                                    )
                                    .gesture(
                                        DragGesture()
                                            .onChanged { value in
                                                let deltaX = value.location.x - regionData[index].position.x
                                                let deltaY = value.location.y - regionData[index].position.y
                                                
                                                // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 60x60
                                                regionData[index].width = max(abs(deltaX) * 2, 60)
                                                regionData[index].height = max(abs(deltaY) * 2, 60)
                                            }
                                    )
                            }
                        }
                    )
                    .onTapGesture {
                        selectedRegionIndex = index
                    }
                    .gesture(
                        DragGesture()
                            .onChanged { value in
                                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ä–µ–≥–∏–æ–Ω –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                                if selectedRegionIndex == index && !isResizeMode {
                                    regionData[index].position = value.location
                                }
                            }
                    )
            }
            
            // –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
            VStack {
                Spacer()
                
                HStack {
                    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–∞—Ö —ç–∫—Ä–∞–Ω–∞
                    VStack(alignment: .leading) {
                        Text("–≠–∫—Ä–∞–Ω: \(Int(screenWidth)) √ó \(Int(screenHeight))")
                            .font(.caption)
                        if let idx = selectedRegionIndex {
                            Text("–í—ã–±—Ä–∞–Ω–æ: \(idx + 1), \(availableOwners[regionData[idx].ownerIndex].rawValue)")
                                .font(.caption)
                        }
                    }
                    .frame(width: 120, alignment: .leading)
                    
                    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    HStack(spacing: 15) {
                        // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω
                        Button {
                            addNewRegion()
                        } label: {
                            Image(systemName: "plus.circle.fill")
                                .resizable()
                                .frame(width: 25, height: 25)
                                .foregroundColor(.green)
                        }
                        
                        // –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
                        Button {
                            if let index = selectedRegionIndex {
                                regionData.remove(at: index)
                                selectedRegionIndex = nil
                            }
                        } label: {
                            Image(systemName: "trash.circle.fill")
                                .resizable()
                                .frame(width: 25, height: 25)
                                .foregroundColor(.red)
                        }
                        .disabled(selectedRegionIndex == nil)
                        
                        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                        Button {
                            isResizeMode.toggle()
                        } label: {
                            Image(systemName: isResizeMode ? "arrow.up.left.and.arrow.down.right.circle.fill" : "arrow.up.left.and.arrow.down.right.circle")
                                .resizable()
                                .frame(width: 25, height: 25)
                                .foregroundColor(.orange)
                        }
                        .disabled(selectedRegionIndex == nil)
                        
                        // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
                        Button {
                            generateCode()
                            showingCode.toggle()
                        } label: {
                            Image(systemName: "doc.on.doc.fill")
                                .resizable()
                                .frame(width: 25, height: 25)
                                .foregroundColor(.blue)
                        }
                    }
                    
                    Spacer()
                    
                    // –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ/–≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
                    if selectedRegionIndex == nil {
                        // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
                        VStack {
                            HStack {
                                // –í—ã–±–æ—Ä —Ñ–æ—Ä–º—ã
                                Picker("", selection: $selectedShapeIndex) {
                                    ForEach(0..<availableShapes.count, id: \.self) { index in
                                        Image(availableShapes[index])
                                            .resizable()
                                            .scaledToFit()
                                            .frame(width: 30, height: 30)
                                            .tag(index)
                                    }
                                }
                                .frame(width: 60)
                                
                                // –í—ã–±–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞
                                Picker("", selection: $selectedOwnerIndex) {
                                    ForEach(0..<availableOwners.count, id: \.self) { index in
                                        Text(availableOwners[index].rawValue)
                                            .foregroundColor(availableOwners[index].color)
                                            .tag(index)
                                    }
                                }
                                .frame(width: 80)
                                
                                // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–π—Å–∫
                                if selectedOwnerIndex != 2 { // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö
                                    Stepper("\(initialTroops)", value: $initialTroops, in: 0...50)
                                        .frame(width: 120)
                                }
                            }
                            
                            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
                            HStack {
                                Text("–†–∞–∑–º–µ—Ä:")
                                    .font(.caption)
                                
                                Slider(value: $regionWidth, in: 60...300, step: 10)
                                    .frame(width: 100)
                                
                                Text("\(Int(regionWidth))√ó\(Int(regionHeight))")
                                    .font(.caption)
                                
                                Slider(value: $regionHeight, in: 60...300, step: 10)
                                    .frame(width: 100)
                            }
                        }
                    } else {
                        // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
                        VStack {
                            HStack {
                                // –í—ã–±–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞
                                Picker("", selection: $regionData[selectedRegionIndex!].ownerIndex) {
                                    ForEach(0..<availableOwners.count, id: \.self) { index in
                                        Text(availableOwners[index].rawValue)
                                            .foregroundColor(availableOwners[index].color)
                                            .tag(index)
                                    }
                                }
                                .frame(width: 80)
                                
                                // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–π—Å–∫
                                if regionData[selectedRegionIndex!].owner != .neutral {
                                    Stepper("\(regionData[selectedRegionIndex!].initialTroops)",
                                            value: $regionData[selectedRegionIndex!].initialTroops,
                                            in: 0...50)
                                        .frame(width: 120)
                                }
                            }
                            
                            // –¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
                            HStack {
                                Text("W:")
                                    .font(.caption)
                                
                                Slider(value: $regionData[selectedRegionIndex!].width, in: 60...300, step: 10)
                                    .frame(width: 100)
                                
                                Text("\(Int(regionData[selectedRegionIndex!].width))√ó\(Int(regionData[selectedRegionIndex!].height))")
                                    .font(.caption)
                                
                                Text("H:")
                                    .font(.caption)
                                
                                Slider(value: $regionData[selectedRegionIndex!].height, in: 60...300, step: 10)
                                    .frame(width: 100)
                            }
                        }
                    }
                }
                .padding(.horizontal)
                .background(Color.white.opacity(0.3))
                .cornerRadius(10)
            }
            
            // –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º
            if showingCode {
                codeOverlay
            }
            
            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
            if isResizeMode && selectedRegionIndex != nil {
                VStack {
                    HStack {
                        Text("–†–ï–ñ–ò–ú –ò–ó–ú–ï–ù–ï–ù–ò–Ø –†–ê–ó–ú–ï–†–ê")
                            .font(.headline)
                            .foregroundColor(.white)
                            .padding(8)
                            .background(Color.orange)
                            .cornerRadius(8)
                    }
                    .padding(.top)
                    
                    Spacer()
                }
            }
        }
    }
    
    // –°–µ—Ç–∫–∞ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    var gridOverlay: some View {
        Canvas { context, size in
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (–∫–∞–∂–¥—ã–µ 50 —Ç–æ—á–µ–∫)
            for y in stride(from: 0, to: size.height, by: 50) {
                let path = Path { p in
                    p.move(to: CGPoint(x: 0, y: y))
                    p.addLine(to: CGPoint(x: size.width, y: y))
                }
                context.stroke(path, with: .color(.gray.opacity(0.5)), lineWidth: 1)
                
                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ Y
                let yText = Text("\(Int(y))")
                    .font(.system(size: 10))
                    .foregroundColor(.gray)
                context.draw(yText, at: CGPoint(x: 15, y: y))
            }
            
            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (–∫–∞–∂–¥—ã–µ 50 —Ç–æ—á–µ–∫)
            for x in stride(from: 0, to: size.width, by: 50) {
                let path = Path { p in
                    p.move(to: CGPoint(x: x, y: 0))
                    p.addLine(to: CGPoint(x: x, y: size.height))
                }
                context.stroke(path, with: .color(.gray.opacity(0.5)), lineWidth: 1)
                
                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ X
                let xText = Text("\(Int(x))")
                    .font(.system(size: 10))
                    .foregroundColor(.gray)
                context.draw(xText, at: CGPoint(x: x, y: 15))
            }
        }
    }
    
    // –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º
    var codeOverlay: some View {
        ZStack {
            // –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞
            Color.black.opacity(0.7)
                .ignoresSafeArea()
                .onTapGesture {
                    showingCode = false
                }
            
            // –û–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            VStack {
                Text("–ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                    .font(.headline)
                    .padding(.top)
                
                Text("–ö–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ GameLevel.swift –≤—ã–≤–µ–¥–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å Xcode.")
                    .font(.subheadline)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal)
                    .padding(.bottom, 5)
                
                Text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å Debug –≤–Ω–∏–∑—É –æ–∫–Ω–∞ Xcode –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥.")
                    .font(.caption)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal)
                
                Divider()
                    .padding(.vertical)
                
                Image(systemName: "terminal")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 60, height: 60)
                    .foregroundColor(.blue)
                    .padding()
                
                Button("–ó–∞–∫—Ä—ã—Ç—å") {
                    showingCode = false
                }
                .padding()
            }
            .frame(width: screenWidth * 0.6)
            .background(Color.white)
            .cornerRadius(15)
            .shadow(radius: 10)
        }
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private func getImageResourceName(_ resource: ImageResource) -> String {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∏–º–µ–Ω–∏ —Ä–µ—Å—É—Ä—Å–∞
        // –í Xcode –∏–º—è —Ä–µ—Å—É—Ä—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –∫–∞–∫ .vector1, .vector2 –∏ —Ç.–¥.
        let fullName = String(describing: resource)
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if let range = fullName.range(of: "name: ") {
            let nameStart = range.upperBound
            if let endRange = fullName[nameStart...].range(of: ",") {
                return String(fullName[nameStart..<endRange.lowerBound])
            }
            return String(fullName[nameStart...])
        }
        
        // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ –º–∞—Å—Å–∏–≤–∞
        for (index, shape) in availableShapes.enumerated() {
            if shape == resource {
                return "vector\(index + 1)"
            }
        }
        
        return "unknownVector"
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    private func addNewRegion() {
        let newRegion = RegionPlacementData(
            id: nextId,
            shape: availableShapes[selectedShapeIndex],
            position: CGPoint(x: screenWidth / 2, y: screenHeight / 2),
            width: regionWidth,
            height: regionHeight,
            ownerIndex: selectedOwnerIndex,
            initialTroops: initialTroops,
            availableOwners: availableOwners
        )
        
        regionData.append(newRegion)
        selectedRegionIndex = regionData.count - 1
        nextId += 1
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è GameLevel.swift
    private func generateCode() {
        var code = "// –£—Ä–æ–≤–µ–Ω—å —Å \(regionData.count) —Ä–µ–≥–∏–æ–Ω–∞–º–∏\n"
        code += "GameLevel(id: 1, regions: [\n"
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        let playerRegions = regionData.filter { $0.owner == .player }
        let cpuRegions = regionData.filter { $0.owner == .cpu }
        let neutralRegions = regionData.filter { $0.owner == .neutral }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã –∏–≥—Ä–æ–∫–∞
        if !playerRegions.isEmpty {
            code += "    // –†–µ–≥–∏–æ–Ω—ã –∏–≥—Ä–æ–∫–∞ (\(playerRegions.count))\n"
            for region in playerRegions {
                let shapeName = getImageResourceName(region.shape)
                code += "    RegionDefinition(shape: .\(shapeName), position: CGPoint(x: \(Int(region.position.x)), y: \(Int(region.position.y))), width: \(Int(region.width)), height: \(Int(region.height)), owner: .player, initialTroops: \(region.initialTroops)),\n"
            }
            code += "\n"
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã CPU
        if !cpuRegions.isEmpty {
            code += "    // –†–µ–≥–∏–æ–Ω—ã CPU (\(cpuRegions.count))\n"
            for region in cpuRegions {
                let shapeName = getImageResourceName(region.shape)
                code += "    RegionDefinition(shape: .\(shapeName), position: CGPoint(x: \(Int(region.position.x)), y: \(Int(region.position.y))), width: \(Int(region.width)), height: \(Int(region.height)), owner: .cpu, initialTroops: \(region.initialTroops)),\n"
            }
            code += "\n"
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
        if !neutralRegions.isEmpty {
            code += "    // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã (\(neutralRegions.count))\n"
            for region in neutralRegions {
                let shapeName = getImageResourceName(region.shape)
                code += "    RegionDefinition(shape: .\(shapeName), position: CGPoint(x: \(Int(region.position.x)), y: \(Int(region.position.y))), width: \(Int(region.width)), height: \(Int(region.height)), owner: .neutral, initialTroops: \(region.initialTroops)),\n"
            }
        }
        
        code += "]),\n"
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        generatedCode = code
        
        // –ù–û–í–û–ï: –í—ã–≤–æ–¥–∏–º –∫–æ–¥ –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–Ω—Å–æ–ª—å Xcode
        print("\n\n=== –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î –î–õ–Ø –í–°–¢–ê–í–ö–ò –í GAMELEVEL.SWIFT ===\n")
        print(code)
        print("=== –ö–û–ù–ï–¶ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–û–ì–û –ö–û–î–ê ===\n\n")
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        showingCode = true
    }
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–º–µ—â–∞–µ–º–æ–º —Ä–µ–≥–∏–æ–Ω–µ
struct RegionPlacementData {
    let id: Int
    let shape: ImageResource
    var position: CGPoint
    var width: CGFloat
    var height: CGFloat
    var ownerIndex: Int
    var initialTroops: Int
    let availableOwners: [Player]
    
    // –í—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    var owner: Player {
        return availableOwners[ownerIndex]
    }
}

#Preview {
    RegionPlacementToolView()
}


